/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "_content/Syncfusion.Blazor/scripts/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./bundles/sf-gantt.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./bundles/sf-gantt.js":
/*!*****************************!*\
  !*** ./bundles/sf-gantt.js ***!
  \*****************************/
/*! no exports provided */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _modules_sf_gantt_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/sf-gantt.js */ "./modules/sf-gantt.js");
/* harmony import */ var _modules_sf_gantt_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_modules_sf_gantt_js__WEBPACK_IMPORTED_MODULE_0__);


/***/ }),

/***/ "./modules/sf-gantt.js":
/*!*****************************!*\
  !*** ./modules/sf-gantt.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

window.sfBlazor = window.sfBlazor || {};

window.sfBlazor.Gantt = function () {
  'use strict';
  /**
   * Splitter module is used to define the splitter position in Gantt layout.
   */

  var Splitter =
  /** @class */
  function () {
    function Splitter(parent) {
      this.parent = parent;
    }

    Splitter.prototype.getTotalColumnWidthByIndex = function (index) {
      var width = 0;
      var tr = this.parent.treeGrid.element.querySelectorAll('.e-headercell');
      index = tr.length > index ? index : tr.length;

      for (var column = 0; column < index; column++) {
        width = width + tr[column].offsetWidth;
      }

      return width;
    };

    return Splitter;
  }();
  /**
   * Specifies SfGantt class for native blazor rendering.
   * @hidden
   */


  var SfGantt =
  /** @class */
  function () {
    function SfGantt(element, options, dotnetRef) {
      this.toolbarHeight = 0;
      this.element = element;
      this.element.blazor_instance = this;
      this.dotNetRef = dotnetRef;
      this.options = options;
      this.initModules();
    }

    SfGantt.prototype.initModules = function () {
      this.splitterModule = new Splitter(this);
    };

    SfGantt.prototype.getOffsetRect = function (element) {
      var box = element.getBoundingClientRect();
      var scrollTop = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop;
      var scrollLeft = window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft;
      var clientTop = document.documentElement.clientTop || document.body.clientTop || 0;
      var clientLeft = document.documentElement.clientLeft || document.body.clientLeft || 0;
      var top = box.top + scrollTop - clientTop;
      var left = box.left + scrollLeft - clientLeft;
      return {
        top: Math.round(top),
        left: Math.round(left),
        width: box.width,
        height: box.height
      };
    };

    SfGantt.prototype.getParentElement = function (elem, selector, isID) {
      var parent = elem;

      while (parent) {
        if (isID ? parent.id === selector : parent.classList.contains(selector)) {
          break;
        }

        parent = parent.parentElement;
      }

      return parent;
    };

    return SfGantt;
  }();
  /**
   * CSS Constants
   */

  /** @hidden */
  // Timeline-Class


  var timelineSingleHeaderOuterDiv = 'e-timeline-single-header-outer-div';
  var holidayLabel = 'e-span';
  var taskBarMainContainer = 'e-taskbar-main-container';
  var taskBarLeftResizer = 'e-taskbar-left-resizer';
  var taskBarRightResizer = 'e-taskbar-right-resizer';
  var childProgressResizer = 'e-child-progress-resizer';
  var chartBodyContainer = 'e-chart-root-container';
  var chartRow = 'e-chart-row';
  var leftLabelContainer = 'e-left-label-container';
  var rightLabelContainer = 'e-right-label-container';
  var traceChildProgressBar = 'e-gantt-child-progressbar';
  var traceChildTaskBar = 'e-gantt-child-taskbar';
  var traceParentTaskBar = 'e-gantt-parent-taskbar';
  var traceParentProgressBar = 'e-gantt-parent-progressbar';
  var Active = 'e-active-container';
  var LeftLabel = 'e-left-label-inner-div';
  var RightLabel = 'e-right-label-inner-div';
  /**
   * Splitter module is used to define the splitter position in Gantt layout.
   */

  var ChartScroll =
  /** @class */
  function () {
    function ChartScroll(ganttParent, element, ganttHeight, contentHeight) {
      this.previousScroll = {
        top: 0,
        left: 0
      };
      this.parent = ganttParent;
      this.isFromTreeGrid = false;
      this.chartElement = element.querySelector('.e-gantt-chart-pane');
      this.element = element.querySelector('.e-chart-scroll-container');
      this.timelineHeaderElement = element.querySelector('.e-timeline-header-container');
      this.holidaySpanElement = element.querySelectorAll('.' + holidayLabel);
      this.addEventListeners();
      this.ChartHeight(element, ganttHeight);

      if (!sf.base.isNullOrUndefined(this.holidaySpanElement)) {
        this.UpdateHolidayLabel(contentHeight);
      }
    }

    ChartScroll.prototype.addEventListeners = function () {
      sf.base.EventHandler.add(this.element, 'scroll', this.onScroll, this);
      sf.base.EventHandler.add(this.chartElement, 'mousedown', this.mouseDownHandler, this);
    };

    ChartScroll.prototype.removeEventListeners = function () {
      sf.base.EventHandler.remove(this.element, 'scroll', this.onScroll);
      sf.base.EventHandler.remove(this.chartElement, 'mousedown', this.mouseDownHandler);
    };

    ChartScroll.prototype.gridScrollHandler = function (top) {
      this.element.scrollTop = top;
      this.isFromTreeGrid = true;
    };

    ChartScroll.prototype.onScroll = function () {
      if (this.element.scrollLeft !== this.previousScroll.left) {
        this.timelineHeaderElement.scrollLeft = this.element.scrollLeft;
        this.previousScroll.left = this.element.scrollLeft;
      }

      if (this.element.scrollTop !== this.previousScroll.top) {
        if (!this.isFromTreeGrid) {
          this.parent.treeGridModule.updateScrollTop(this.element.scrollTop);
        }

        this.previousScroll.top = this.element.scrollTop;
        this.isFromTreeGrid = false;
      }
    };

    ChartScroll.prototype.mouseDownHandler = function (e) {
      var ChartElement = this.parent.getParentElement(e.target, 'e-gantt-chart');

      if (ChartElement != null) {
        var target = null;
        var cellUid = null;

        if (this.parent.getParentElement(e.target, 'e-timeline-header-container')) {
          target = "Header";
        } else if (this.parent.getParentElement(e.target, 'e-content')) {
          target = "Content";
          cellUid = this.parent.getParentElement(e.target, 'e-chart-row-cell') ? this.parent.getParentElement(e.target, 'e-chart-row-cell').getAttribute('data-uid') : null;
        }

        if (target == "Header" || target == "Content") {
          this.parent.dotNetRef.invokeMethodAsync("ChartMouseDownHandler", target, cellUid);
        }
      }
    };

    ChartScroll.prototype.ChartHeight = function (element, ganttHeight) {
      var toolbarHeight = 0;
      this.toolbarElement = element.querySelector('#' + element.id + '_Gantt_Toolbar');

      if (!sf.base.isNullOrUndefined(this.toolbarElement)) {
        toolbarHeight = this.toolbarElement.offsetHeight;
      }

      this.viewPortHeight = ganttHeight - this.timelineHeaderElement.offsetHeight - toolbarHeight;
      this.element.style.height = this.viewPortHeight + "px";
    };

    ChartScroll.prototype.UpdateHolidayLabel = function (contentHeight) {
      var length = this.holidaySpanElement.length;

      for (var label = 0; label < length; label++) {
        this.holidaySpanElement[label].style.top = sf.base.formatUnit(this.viewPortHeight < contentHeight ? this.viewPortHeight / 2 : contentHeight / 2);
      }
    };

    ChartScroll.prototype.destroy = function () {
      this.removeEventListeners();
    };

    return ChartScroll;
  }();

  var TreeGrid =
  /** @class */
  function () {
    /**
    * Constructor for the Grid scrolling.
    * @hidden
    */
    function TreeGrid(ganttParent, content) {
      this.previousScroll = {
        top: 0,
        left: 0
      };
      this.parent = ganttParent;
      this.content = content;
      this.addEventListeners();
    }

    TreeGrid.prototype.addEventListeners = function () {
      sf.base.EventHandler.add(this.content, 'scroll', this.scrollHandler, this);
    };

    TreeGrid.prototype.removeEventListeners = function () {
      sf.base.EventHandler.remove(this.content, 'scroll', this.scrollHandler);
    };

    TreeGrid.prototype.scrollHandler = function (e) {
      if (this.content.scrollTop !== this.previousScroll.top) {
        this.parent.chartScrollModule.gridScrollHandler(this.content.scrollTop);
      }

      this.previousScroll.top = this.content.scrollTop;
    };

    TreeGrid.prototype.updateScrollTop = function (top) {
      this.content.scrollTop = top;
      this.previousScroll.top = this.content.scrollTop;
    };

    TreeGrid.prototype.destroy = function () {
      this.removeEventListeners();
    };

    return TreeGrid;
  }();

  var __assign = undefined && undefined.__assign || function () {
    __assign = Object.assign || function (t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];

        for (var p in s) {
          if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
      }

      return t;
    };

    return __assign.apply(this, arguments);
  };

  var TaskbarEdit =
  /** @class */
  function () {
    /**
    * Constructor for the taskbar editing
    * @hidden
    */
    function TaskbarEdit(ganttParent) {
      this.parent = ganttParent;
      this.initPublicProp();
      this.ganttChartTableBody = this.parent.element.querySelector("#" + this.parent.element.id + "_chartContentBody");
      this.chartPane = this.parent.element.querySelector(".e-gantt-chart-pane");
      this.chartBodyContainer = this.parent.element.querySelector("." + chartBodyContainer);
      this.addEventListeners();
    }

    TaskbarEdit.prototype.initPublicProp = function () {
      this.taskBarEditElement = null;
      this.taskBarEditRecord = null;
      this.taskBarEditAction = null;
      this.dragMouseLeave = false;
      this.isMouseDragged = false;
    };

    TaskbarEdit.prototype.addEventListeners = function () {
      var isIE11Pointer = sf.base.Browser.isPointer;
      sf.base.EventHandler.add(this.chartPane, sf.base.Browser.touchStartEvent, this.ganttMouseDown, this);
      sf.base.EventHandler.add(this.chartPane, sf.base.Browser.touchMoveEvent, this.ganttMouseMove, this); // EventHandler.add(this.chartPane, mouseLeave, this.ganttMouseLeave, this);

      sf.base.EventHandler.add(this.chartPane, sf.base.Browser.touchEndEvent, this.ganttChartMouseUp, this);
    };

    TaskbarEdit.prototype.removeEventListeners = function () {
      var isIE11Pointer = sf.base.Browser.isPointer;
      sf.base.EventHandler.remove(this.chartPane, sf.base.Browser.touchStartEvent, this.ganttMouseDown);
      sf.base.EventHandler.remove(this.chartPane, sf.base.Browser.touchMoveEvent, this.ganttMouseMove); //  EventHandler.remove(this.chartPane, mouseLeave, this.ganttMouseLeave);

      sf.base.EventHandler.remove(this.chartPane, sf.base.Browser.touchEndEvent, this.ganttChartMouseUp);
    };

    TaskbarEdit.prototype.ganttMouseDown = function (e) {
      this.updateTaskBarEditElement(e);
    };

    TaskbarEdit.prototype.ganttChartMouseUp = function (e) {
      var _this = this;

      this.parent.dotNetRef.invokeMethodAsync('UpdateResizedData', this.dataGuid, this.taskBarEditAction, this.taskBarEditRecord).then(function () {
        _this.initPublicProp();
      });
    };

    TaskbarEdit.prototype.updateTaskBarEditElement = function (e) {
      var _this = this;

      var target = this.getElementByPosition(e);
      var element = this.parent.getParentElement(target, taskBarMainContainer);
      this.taskBarEditElement = element;

      if (this.taskBarEditElement) {
        if (e.type === 'mousedown' || e.type === 'touchstart' || e.type === 'click') {
          this.dataGuid = this.taskBarEditElement.getAttribute('rowuniqueid');
          this.parent.dotNetRef.invokeMethodAsync('GetEditedRecord', this.dataGuid).then(function (record) {
            _this.taskBarEditRecord = record;

            _this.updateMouseDownProperties(e);

            _this.taskBarEditAction = _this.getTaskBarAction(e);
          });
        }
      }
    };

    TaskbarEdit.prototype.updateMouseDownProperties = function (event) {
      var e = this.getCoordinate(event);

      if (e.pageX || e.pageY) {
        var containerPosition = this.parent.getOffsetRect(this.chartBodyContainer);
        this.mouseDownX = e.pageX - containerPosition.left + this.parent.chartScrollModule.previousScroll.left;
        this.mouseDownY = e.pageY - containerPosition.top + this.parent.chartScrollModule.previousScroll.top;
      }
    };

    TaskbarEdit.prototype.getTaskBarAction = function (e) {
      var mouseDownElement = this.getElementByPosition(e);
      var data = this.taskBarEditRecord;
      var action = '';

      if (mouseDownElement.classList.contains(taskBarLeftResizer)) {
        action = 'LeftResizing';
      } else if (mouseDownElement.classList.contains(taskBarRightResizer)) {
        action = 'RightResizing';
      } else if (mouseDownElement.classList.contains(childProgressResizer) || sf.base.closest(mouseDownElement, '.' + childProgressResizer)) {
        action = 'ProgressResizing';
      } else if (data) {
        action = data.hasChildRecords ? this.parent.options.taskMode === 'Auto' ? 'ParentDrag' : '' : data.isMilestone ? 'MilestoneDrag' : 'ChildDrag';
      }

      return action;
    };

    TaskbarEdit.prototype.getElementByPosition = function (event) {
      var e = this.getCoordinate(event);
      return document.elementFromPoint(e.pageX - window.pageXOffset, e.pageY - window.pageYOffset);
    }; // Get XY coordinates for touch and non-touch device


    TaskbarEdit.prototype.getCoordinate = function (event) {
      var coordinates = {};

      if (event) {
        var e = event;
        coordinates.pageX = e.pageX;
        coordinates.pageY = e.pageY;
      }

      return coordinates;
    };

    TaskbarEdit.prototype.ganttMouseMove = function (event) {
      var containerPosition = this.parent.getOffsetRect(this.chartBodyContainer);
      var e = this.getCoordinate(event);
      this.mouseMoveX = e.pageX - containerPosition.left + this.parent.chartScrollModule.previousScroll.left;
      this.mouseMoveY = e.pageY - containerPosition.top + this.parent.chartScrollModule.previousScroll.top;
      this.dragMouseLeave = false;
      this.isMouseDragCheck();

      if (this.isMouseDragged && this.taskBarEditAction) {
        this.taskBarEditingAction(event, false);
      }
    };

    TaskbarEdit.prototype.isMouseDragCheck = function () {
      if (!this.isMouseDragged && this.taskBarEditAction && (this.mouseDownX !== this.mouseMoveX && (this.mouseDownX + 3 < this.mouseMoveX || this.mouseDownX - 3 > this.mouseMoveX) || this.mouseDownY !== this.mouseMoveY && (this.mouseDownY + 3 < this.mouseMoveY || this.mouseDownY - 3 > this.mouseMoveY))) {
        this.isMouseDragged = true;
        var item = this.taskBarEditRecord;
        this.previousItem = __assign({}, item);
        this.taskBarEditElement.setAttribute('aria-grabbed', 'true');
      }
    };

    TaskbarEdit.prototype.updateMouseMoveProperties = function (event) {
      var containerPosition = this.parent.getOffsetRect(this.chartBodyContainer);
      var e = this.getCoordinate(event);

      if (e.pageX || e.pageY) {
        this.mouseMoveX = e.pageX - containerPosition.left + this.parent.chartScrollModule.previousScroll.left;
        this.mouseMoveY = e.pageY - containerPosition.top + this.parent.chartScrollModule.previousScroll.top;
      }

      if (this.taskBarEditRecord.width > 3 && !(this.taskBarEditAction === 'ProgressResizing' && (this.taskBarEditRecord.progress === 0 || this.taskBarEditRecord.progress === 100))) {
        var mouseX = this.mouseMoveX - this.parent.chartScrollModule.previousScroll.left + containerPosition.left;
        var mouseY = this.mouseMoveY - this.parent.chartScrollModule.previousScroll.top + containerPosition.top;

        if (mouseX + 20 > containerPosition.left + this.chartBodyContainer.offsetWidth) {
          this.timerCount = this.parent.chartScrollModule.previousScroll.left;
        } else if (mouseX - 20 < containerPosition.left) {
          this.timerCount = this.parent.chartScrollModule.previousScroll.left;
        }
      }
    };

    TaskbarEdit.prototype.taskBarEditingAction = function (e, isMouseClick) {
      // let args: ITaskbarEditedEventArgs = {} as ITaskbarEditedEventArgs;
      this.updateMouseMoveProperties(e);

      if (this.taskBarEditAction === 'ProgressResizing') {
        this.performProgressResize(e);
      } else if (this.taskBarEditAction === 'LeftResizing') {
        this.enableLeftResizing(e);
      } else if (this.taskBarEditAction === 'RightResizing' || this.taskBarEditAction === 'ParentResizing') {
        this.enableRightResizing(e);
      } else if (this.taskBarEditAction === 'ParentDrag' || this.taskBarEditAction === 'ChildDrag' || this.taskBarEditAction === 'MilestoneDrag') {
        this.enableDragging(e);
      }

      this.setItemPosition();
    };

    TaskbarEdit.prototype.setItemPosition = function () {
      var item = this.taskBarEditRecord;
      var width = this.taskBarEditAction === 'MilestoneDrag' || item.isMilestone ? this.milestoneHeight : item.width;
      var rightResizer = width - 10;
      /* tslint:disable-next-line */

      var taskBarMainContainer$$1 = !this.taskBarEditElement.classList.contains(taskBarMainContainer) ? sf.base.closest(this.taskBarEditElement, 'tr.' + chartRow).querySelector('.' + taskBarMainContainer) : this.taskBarEditElement;
      var leftLabelContainer$$1 = sf.base.closest(this.taskBarEditElement, 'tr.' + chartRow).querySelector('.' + leftLabelContainer);
      var rightLabelContainer$$1 = sf.base.closest(this.taskBarEditElement, 'tr.' + chartRow).querySelector('.' + rightLabelContainer);
      var traceChildProgressBar$$1 = this.taskBarEditElement.querySelector('.' + traceChildProgressBar);
      var traceChildTaskBar$$1 = this.taskBarEditElement.querySelector('.' + traceChildTaskBar);
      var childProgressResizer$$1 = this.taskBarEditElement.querySelector('.' + childProgressResizer);
      var taskBarRightResizer$$1 = this.taskBarEditElement.querySelector('.' + taskBarRightResizer);
      var traceParentTaskBar$$1 = this.taskBarEditElement.querySelector('.' + traceParentTaskBar);
      var traceParentProgressBar$$1 = this.taskBarEditElement.querySelector('.' + traceParentProgressBar);

      if (this.taskBarEditAction !== 'ParentResizing') {
        taskBarMainContainer$$1.style.width = width + 'px';
        taskBarMainContainer$$1.style.left = item.left + 'px';
        leftLabelContainer$$1.style.width = item.left + 'px';

        if (!sf.base.isNullOrUndefined(rightLabelContainer$$1)) {
          rightLabelContainer$$1.style.left = item.left + width + 'px';
        }
      }

      if (this.taskBarEditAction === 'MilestoneDrag' || item.isMilestone) {
        taskBarMainContainer$$1.style.left = item.left - width / 2 + 'px';
        leftLabelContainer$$1.style.width = item.left - width / 2 + 'px';

        if (!sf.base.isNullOrUndefined(rightLabelContainer$$1)) {
          rightLabelContainer$$1.style.left = item.left + width / 2 + 'px';
        }
      } else if (this.taskBarEditAction === 'ProgressResizing') {
        traceChildTaskBar$$1.style.left = item.left + item.progressWidth - 10 + 'px';

        if (!sf.base.isNullOrUndefined(traceChildProgressBar$$1)) {
          traceChildProgressBar$$1.style.width = item.progressWidth + 'px';
          traceChildProgressBar$$1.style.borderBottomRightRadius = this.progressBorderRadius + 'px';
          traceChildProgressBar$$1.style.borderTopRightRadius = this.progressBorderRadius + 'px';
          childProgressResizer$$1.style.left = item.progressWidth - 8 + 'px';
        }
      } else if (this.taskBarEditAction === 'RightResizing') {
        traceChildTaskBar$$1.style.width = width + 'px';

        if (!sf.base.isNullOrUndefined(traceChildProgressBar$$1)) {
          traceChildProgressBar$$1.style.width = item.progressWidth + 'px';
          taskBarRightResizer$$1.style.left = rightResizer + 'px';
          childProgressResizer$$1.style.left = item.progressWidth - 10 + 'px';
        }
      } else if (this.taskBarEditAction === 'ParentDrag') {
        if (!sf.base.isNullOrUndefined(traceParentTaskBar$$1)) {
          traceParentTaskBar$$1.style.width = width + 'px';
        }

        if (!sf.base.isNullOrUndefined(traceChildProgressBar$$1)) {
          traceParentProgressBar$$1.style.width = item.progressWidth + 'px';
        }
      } else {
        if (!sf.base.isNullOrUndefined(traceChildTaskBar$$1)) {
          traceChildTaskBar$$1.style.width = width + 'px';
        }

        if (!sf.base.isNullOrUndefined(traceChildProgressBar$$1)) {
          taskBarRightResizer$$1.style.left = rightResizer + 'px';
          traceChildProgressBar$$1.style.width = item.progressWidth + 'px';
          childProgressResizer$$1.style.left = item.progressWidth - 10 + 'px';
        }
      }
    };
    /**
     * To update left and width while perform taskbar left resize operation.
     * @return {void}
     * @private
     */


    TaskbarEdit.prototype.enableLeftResizing = function (e) {
      var item = this.taskBarEditRecord;
      var diffrenceWidth = 0;

      if (this.mouseDownX > this.mouseMoveX) {
        if (this.mouseMoveX < item.left + item.width) {
          diffrenceWidth = this.mouseDownX - this.mouseMoveX;

          if (item.left > 0) {
            item.left = this.previousItem.left - diffrenceWidth;
            item.width = this.previousItem.width + diffrenceWidth;
          }
        } else {
          if (this.mouseMoveX > item.left + item.width) {
            diffrenceWidth = this.mouseDownX - this.mouseMoveX;
            item.left = this.previousItem.left - diffrenceWidth;
            item.width = 3;
          }
        }
      } else {
        if (this.mouseMoveX < item.left + item.width) {
          diffrenceWidth = this.mouseMoveX - this.mouseDownX;

          if (item.left < item.left + item.width && this.previousItem.left + diffrenceWidth <= this.previousItem.left + this.previousItem.width) {
            item.left = this.previousItem.left + diffrenceWidth;
            item.width = this.previousItem.width - diffrenceWidth;
          }
        } else {
          diffrenceWidth = this.mouseMoveX - this.mouseDownX;
          item.left = this.previousItem.left + diffrenceWidth;
          item.width = 3;
        }
      }

      this.updateEditPosition(e, item);
      item.left = this.previousItem.left + this.previousItem.width - item.width;
    };

    TaskbarEdit.prototype.enableRightResizing = function (e) {
      var item = this.taskBarEditRecord;
      var differenceWidth = 0;

      if (this.mouseDownX > this.mouseMoveX) {
        if (this.mouseMoveX > item.left && this.mouseDownX - this.mouseMoveX > 3) {
          differenceWidth = this.mouseDownX - this.mouseMoveX;
          item.width = this.previousItem.width - differenceWidth;
        } else {
          if (this.mouseMoveX < item.left) {
            item.width = 3;
          }
        }
      } else {
        if (this.mouseMoveX > item.left) {
          differenceWidth = this.mouseMoveX - this.mouseDownX;
          item.width = this.previousItem.width + differenceWidth;
        }
      }

      this.updateEditPosition(e, item);
    };

    TaskbarEdit.prototype.enableDragging = function (e) {
      var item = this.taskBarEditRecord;
      var differenceWidth = 0;

      if (this.mouseDownX > this.mouseMoveX) {
        differenceWidth = this.mouseDownX - this.mouseMoveX;

        if (differenceWidth > 0) {
          item.left = this.previousItem.left - differenceWidth;
        }
      } else {
        differenceWidth = this.mouseMoveX - this.mouseDownX;
        item.left = this.previousItem.left + differenceWidth;
      }

      var left = item.left < 0 ? 0 : item.left + item.width >= this.parent.totalTimelineWidth ? this.parent.totalTimelineWidth - item.width : item.left;
      item.left = left;
    };

    TaskbarEdit.prototype.performProgressResize = function (e) {
      var item = this.taskBarEditRecord;
      var diffrenceWidth = 0;

      if (this.mouseDownX > this.mouseMoveX) {
        if (this.mouseMoveX > item.left && this.mouseMoveX < item.left + item.width && item.left > 0) {
          diffrenceWidth = this.mouseMoveX - item.left;
          item.progressWidth = diffrenceWidth;
        } else {
          if (this.mouseMoveX >= item.left + item.width) {
            item.progressWidth = item.width;
          } else {
            item.progressWidth = 0;
          }
        }
      } else {
        if (this.mouseMoveX > item.left && this.mouseMoveX < item.left + item.width) {
          diffrenceWidth = this.mouseMoveX - item.left;
          item.progressWidth = diffrenceWidth;
        } else {
          if (this.mouseMoveX <= item.left) {
            item.progressWidth = 0;
          } else {
            item.progressWidth = item.width;
          }
        }
      }

      var widthValue = item.progressWidth > item.width ? item.width : item.progressWidth;
      widthValue = item.progressWidth < 0 ? 0 : item.progressWidth;
      item.progressWidth = widthValue;
      var diff = item.width - item.progressWidth;

      if (diff <= 4) {
        this.progressBorderRadius = 4 - diff;
      } else {
        this.progressBorderRadius = 0;
      }
    };

    TaskbarEdit.prototype.updateEditPosition = function (e, item) {
      this.updateIsMilestone(item);
    };

    TaskbarEdit.prototype.updateIsMilestone = function (item) {
      if (item.width <= 3) {
        item.width = 3;
        item.isMilestone = true;
      } else {
        item.isMilestone = false;
      }
    };

    TaskbarEdit.prototype.destroy = function () {
      this.removeEventListeners();
    };

    return TaskbarEdit;
  }();
  /**
   * Keyboard module is used to define the keyboard interactions.
   */


  var KeyboardHandler =
  /** @class */
  function () {
    function KeyboardHandler(parent) {
      this.parent = parent;
    }

    KeyboardHandler.prototype.taskbarFocus = function (tdElem) {
      var taskbarElem = tdElem.querySelector('.' + traceChildTaskBar);
      var parentTaskbarElem = tdElem.querySelector('.' + traceParentTaskBar);

      if (taskbarElem) {
        taskbarElem.focus();
        tdElem.querySelector('.' + taskBarMainContainer).querySelector('.' + traceChildTaskBar).classList.add(Active);
      } else {
        parentTaskbarElem.focus();
        tdElem.querySelector('.' + taskBarMainContainer).querySelector('.' + traceParentTaskBar).classList.add(Active);
      }

      return "isNextTaskbar";
    };

    KeyboardHandler.prototype.RightLabelFocus = function (tdElem) {
      var rightLabelElem = tdElem.querySelector('.' + rightLabelContainer);
      rightLabelElem.focus();
      rightLabelElem.querySelector('.e-label').classList.add(Active);
      return "isNextRightLabel";
    };

    KeyboardHandler.prototype.LeftLabelFocus = function (tdElem) {
      var leftLabelElem = tdElem.querySelector('.' + leftLabelContainer);
      leftLabelElem.focus();
      leftLabelElem.querySelector('.e-label').classList.add(Active);
      return "isNextLeftLabel";
    };

    return KeyboardHandler;
  }();
  /**
   * Blazor gantt interop handler
   */
  // tslint:disable


  var Gantt = {
    initialize: function initialize(element, options, dotnetRef) {
      new SfGantt(element, options, dotnetRef);
      this.dotnetRef = dotnetRef;
      var offset = {};
      element.blazor_instance.height = offset.height = element.offsetHeight;
      element.blazor_instance.width = offset.width = element.offsetWidth;
      element.blazor_instance.toolbarElement = element.querySelector("#" + element.id + "_Gantt_Toolbar");

      if (!sf.base.isNullOrUndefined(element.blazor_instance.toolbarElement)) {
        element.blazor_instance.toolbarHeight = offset.toolbarHeight = element.blazor_instance.toolbarElement.offsetHeight;
      }

      return offset;
    },
    getTotalColumnWidthByIndex: function getTotalColumnWidthByIndex(element, index) {
      return element.blazor_instance.splitterModule.getTotalColumnWidthByIndex(index);
    },
    treegridDataBound: function treegridDataBound(element, isSingleTier) {
      this.ensureScrollBar(element);
      this.treegridHeaderAlign(element, isSingleTier);
    },
    treegridHeaderAlign: function treegridHeaderAlign(element, isSingleTier) {
      if (isSingleTier) {
        sf.base.addClass(element.blazor_instance.treeGridElement.querySelectorAll('.e-headercell'), timelineSingleHeaderOuterDiv);
        sf.base.addClass(element.blazor_instance.treeGridElement.querySelectorAll('.e-columnheader'), timelineSingleHeaderOuterDiv);
        var TreeGridcontent = element.querySelector('.e-yscroll');
        var chartContentHeight = element.querySelector('.e-chart-scroll-container').offsetHeight;
        TreeGridcontent.style.height = chartContentHeight + "px";
      }
    },
    getTreeGrid: function getTreeGrid(element) {
      element.blazor_instance.treeGrid = element.blazor_instance.treeGridElement.blazor_instance;
    },
    ensureScrollBar: function ensureScrollBar(element) {
      element.blazor_instance.treeGridElement = element.querySelector('#treeGrid' + element.id);
      var content = element.blazor_instance.treeGridElement.querySelector('.e-content');

      if (content) {
        var gridHeader = element.blazor_instance.treeGridElement.querySelector('.e-gridheader');
        content.style.height = element.blazor_instance.height - element.blazor_instance.toolbarHeight - gridHeader.offsetHeight + "px";
        element.blazor_instance.treeGridModule = new TreeGrid(element.blazor_instance, content);
      }

      var scrollWidth = this.getScrollbarWidth(element);

      if (scrollWidth !== 0) {
        content.style.cssText += 'width: calc(100% + ' + scrollWidth + 'px);';
      }
    },
    getScrollbarWidth: function getScrollbarWidth(element) {
      var outer = document.createElement('div');
      outer.style.visibility = 'hidden';
      outer.style.overflow = 'scroll';
      outer.style.msOverflowStyle = 'scrollbar';
      var inner = document.createElement('div');
      outer.appendChild(inner);
      element.appendChild(outer);
      var scrollbarWidth = outer.offsetWidth - inner.offsetWidth;
      outer.parentNode.removeChild(outer);
      return scrollbarWidth;
    },
    ChartInitialize: function ChartInitialize(element, ganttHeight, contentHeight, totalTimelineWidth) {
      element.blazor_instance.totalTimelineWidth = totalTimelineWidth;

      if (element.blazor_instance.options.allowTaskbarEditing) {
        element.blazor_instance.taskbarEditModule = new TaskbarEdit(element.blazor_instance);
      }

      element.blazor_instance.chartScrollModule = new ChartScroll(element.blazor_instance, element, ganttHeight, contentHeight);
      return element.blazor_instance.chartScrollModule.viewPortHeight;
    },
    UpdateScroll: function UpdateScroll(element, scrollBarValue) {
      this.scrollBarElement = element.querySelector('.e-chart-scroll-container');

      if (this.scrollBarElement.offsetWidth < scrollBarValue || this.scrollBarElement.scrollLeft > scrollBarValue) {
        this.scrollBarElement.scrollLeft = scrollBarValue;
      }
    },
    calcRowHeight: function calcRowHeight(element) {
      return element.querySelector('.e-row').offsetHeight;
    },
    focusOutHandler: function focusOutHandler(elem) {
      elem.classList.remove(Active);
    },
    tabFocusHandler: function tabFocusHandler(id, elem, isShift) {
      elem.blazor_instance.keyboardModule = new KeyboardHandler(elem.blazor_instance);
      var tdElem = elem.querySelector(".e-chart-row-cell[data-uid=" + id + "]");
      var focusElem = tdElem.querySelector('.' + Active) ? tdElem.querySelector('.' + Active).parentElement : null;

      if (!focusElem) {
        var result = "isNextLeftLabel";

        if (!isShift && tdElem.querySelector('.' + LeftLabel)) {
          result = elem.blazor_instance.keyboardModule.LeftLabelFocus(tdElem);
        } else if (isShift && tdElem.querySelector('.' + RightLabel)) {
          result = elem.blazor_instance.keyboardModule.RightLabelFocus(tdElem);
        } else {
          result = elem.blazor_instance.keyboardModule.taskbarFocus(tdElem);
        }

        return result;
      } else if (focusElem.classList.contains(LeftLabel)) {
        if (isShift) {
          focusElem.querySelector('.e-label').classList.remove(Active);
          focusElem.blur();
          return "isNextGrid";
        } else {
          return elem.blazor_instance.keyboardModule.taskbarFocus(tdElem);
        }
      } else if (!focusElem.classList.length) {
        if (!isShift) {
          if (tdElem.querySelector('.e-right-label-inner-div')) {
            return elem.blazor_instance.keyboardModule.RightLabelFocus(tdElem);
          } else {
            return "isNextGrid";
          }
        } else {
          if (tdElem.querySelector('.e-left-label-inner-div')) {
            return elem.blazor_instance.keyboardModule.LeftLabelFocus(tdElem);
          } else {
            return "isNextGrid";
          }
        }
      } else if (focusElem.classList.contains(RightLabel)) {
        if (isShift) {
          return elem.blazor_instance.keyboardModule.taskbarFocus(tdElem);
        } else {
          return "isNextGrid";
        }
      } else {
        return "";
      }
    },
    getChartWidth: function getChartWidth(element) {
      return element.querySelector('.e-gantt-chart-pane').clientWidth;
    }
  };
  return Gantt;
}();

/***/ })

/******/ });