/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "_content/Syncfusion.Blazor/scripts/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./bundles/sf-listbox.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./bundles/sf-listbox.js":
/*!*******************************!*\
  !*** ./bundles/sf-listbox.js ***!
  \*******************************/
/*! no exports provided */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _modules_sf_listbox_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/sf-listbox.js */ "./modules/sf-listbox.js");
/* harmony import */ var _modules_sf_listbox_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_modules_sf_listbox_js__WEBPACK_IMPORTED_MODULE_0__);


/***/ }),

/***/ "./modules/sf-listbox.js":
/*!*******************************!*\
  !*** ./modules/sf-listbox.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports) {

window.sfBlazor = window.sfBlazor || {};

window.sfBlazor.ListBox = function () {
  'use strict';

  var CONTAINER = 'e-listbox-container';
  var LIST = '.e-ul';
  var LISTITEM = 'e-list-item';
  var SELECTED = 'e-selected';
  var DATAVALUE = 'data-value';
  var DRAGEND = 'DragEnd';
  var COMBINED = 'scopedListBox';
  var HASH = '#';
  var DOT = '.';
  var PLACEHOLDER = 'e-placeholder';
  var SPAN = 'span';
  var BADGE = 'e-list-badge';
  var PREVENT = 'e-drag-prevent';
  var KEYDOWN = 'keydown';
  var SORTABLE = 'sortable';
  var UP = 38;
  var DOWN = 40;
  var KEYA = 65;
  var SPACEKEY = 32;
  /**
   * Client side scripts for SfListBox
   */

  var SfListBox =
  /** @class */
  function () {
    function SfListBox(element, scopeElement, allowDragDrop, dotnetRef) {
      this.element = element;
      this.scopeElement = scopeElement;
      this.dotnetRef = dotnetRef;
      this.allowDragAndDrop = allowDragDrop;
      this.element.blazor__instance = this;
      sf.base.EventHandler.add(this.element, KEYDOWN, this.keyDownHandler, this);

      if (!sf.base.isNullOrUndefined(this.scopeElement.blazor__instance) && !this.scopeElement.blazor__instance.scope) {
        if (this.scopeElement !== this.element) {
          this.scope = sf.base.getUniqueID(COMBINED);
          this.scopeElement.blazor__instance.scope = this.scope;
          this.scopeElement.blazor__instance.initializeDraggable();
        }

        this.initializeDraggable();
      }
    }

    SfListBox.prototype.initializeDraggable = function () {
      var _this = this;

      if (!this.allowDragAndDrop) {
        return;
      }

      var ul = sf.base.select(LIST, this.element);
      new sf.lists.Sortable(ul, {
        scope: this.scope,
        itemClass: LISTITEM,
        beforeDragStart: this.triggerBeforeDragStart.bind(this),
        dragStart: this.triggerDragStart.bind(this),
        beforeDrop: this.dragEnd.bind(this),
        placeHolder: function placeHolder() {
          return sf.base.createElement(SPAN, {
            className: PLACEHOLDER
          });
        },
        helper: function helper(e) {
          var element = _this.element.cloneNode();

          var target = e.sender.cloneNode(true);
          element.appendChild(target);
          var refEle = sf.base.select(DOT + LISTITEM, _this.element);
          element.style.width = refEle.offsetWidth + 'px';
          element.style.height = refEle.offsetHeight + 'px';
          var selectedList = [].slice.call(sf.base.selectAll(DOT + LISTITEM + DOT + SELECTED, _this.element));

          if (selectedList.length && selectedList.length > 1 && selectedList.indexOf(e.sender) > -1) {
            target.appendChild(sf.base.createElement(SPAN, {
              className: BADGE,
              innerHTML: selectedList.length.toString()
            }));
          }

          element.style.zIndex = sf.popups.getZindexPartial(_this.element).toString();
          return element;
        }
      });
    };

    SfListBox.prototype.triggerBeforeDragStart = function (args) {
      args.cancel = args.target.classList.contains(PREVENT);
    };

    SfListBox.prototype.triggerDragStart = function (args) {
      args.bindEvents(args.dragElement);
    };

    SfListBox.prototype.dragEnd = function (args) {
      var list;
      var scopedListBox = false;
      var sameListBox = false;

      if (this.element !== this.scopeElement) {
        list = sf.base.closest(args.target, HASH + this.scopeElement.id);
      }

      if (list) {
        scopedListBox = true;
      } else {
        list = sf.base.closest(args.target, HASH + this.element.id);

        if (list) {
          sameListBox = true;
        }
      }

      args.cancel = true;
      this.dotnetRef.invokeMethodAsync(DRAGEND, args.droppedElement.getAttribute(DATAVALUE), sameListBox, scopedListBox, args.previousIndex, args.currentIndex);
    };

    SfListBox.prototype.keyDownHandler = function (e) {
      var target = e.target;

      if (e.keyCode === UP || e.keyCode === DOWN) {
        e.preventDefault();

        if (target.classList.contains(CONTAINER)) {
          var listEle = sf.base.select(DOT + LISTITEM, this.element);

          if (listEle) {
            listEle.focus();
          }
        } else {
          var list = [].slice.call(sf.base.selectAll(DOT + LISTITEM, this.element));
          var index = list.indexOf(target);

          if (index < 0) {
            return;
          }

          index = e.keyCode === UP ? index - 1 : index + 1;

          if (index < 0 || index > list.length - 1) {
            return;
          }

          list[index].focus();
        }
      } else if (e.keyCode === KEYA && e.ctrlKey || e.keyCode === SPACEKEY) {
        e.preventDefault();
      }
    };

    SfListBox.prototype.destroyDraggable = function () {
      var sortable = sf.base.getComponent(sf.base.select(LIST, this.element), SORTABLE);

      if (!sf.base.isNullOrUndefined(sortable)) {
        sortable.destroy();
      }
    };

    SfListBox.prototype.destroy = function () {
      this.destroyDraggable();
      sf.base.EventHandler.remove(this.element, KEYDOWN, this.keyDownHandler);
    };

    return SfListBox;
  }(); // eslint-disable-next-line @typescript-eslint/naming-convention, no-underscore-dangle, id-blacklist, id-match


  var ListBox = {
    initialize: function initialize(element, scopeEle, allowDragDrop, dotnetRef) {
      if (!sf.base.isNullOrUndefined(element)) {
        new SfListBox(element, scopeEle, allowDragDrop, dotnetRef);
      }
    },
    destroy: function destroy(element) {
      if (!sf.base.isNullOrUndefined(element) && !sf.base.isNullOrUndefined(element.blazor__instance)) {
        element.blazor__instance.destroy();
      }
    }
  };
  return ListBox;
}();

/***/ })

/******/ });